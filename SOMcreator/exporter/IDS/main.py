from __future__ import annotations

import os
from datetime import date

from lxml.etree import Element, ElementTree, SubElement

from . import ids_xsd, xml_xsd
import SOMcreator
from SOMcreator.constants import value_constants, ifc_datatypes
from SOMcreator.util.xml import transform_data_format

NSMAP = {
    "ids": ids_xsd.DEFAULT_NS[1:-1],
    "xs": xml_xsd.NS_XS[1:-1],
    "xsi": xml_xsd.NS_XSI[1:-1],
}


def _build_info(proj: SOMcreator.SOMProject, author, xml_parent: Element) -> None:
    xml_element = SubElement(xml_parent, ids_xsd.INFO, nsmap=NSMAP)
    SubElement(xml_element, ids_xsd.TITLE, nsmap=NSMAP).text = (
        f"Pruefregeln fuer Projekt '{proj.name}'"
    )
    SubElement(xml_element, ids_xsd.COPYRIGHT, nsmap=NSMAP).text = "MIT"
    SubElement(xml_element, ids_xsd.VERSION, nsmap=NSMAP).text = "1.1.0"
    SubElement(xml_element, ids_xsd.DESCRIPTION, nsmap=NSMAP).text = (
        f"Autogenerated by SOMcreator"
    )
    SubElement(xml_element, ids_xsd.AUTHOR, nsmap=NSMAP).text = str(author)
    SubElement(xml_element, ids_xsd.DATE, nsmap=NSMAP).text = f"{date.today()}"
    SubElement(xml_element, ids_xsd.PURPOSE, nsmap=NSMAP).text = "Modelcheck"


def _build_specifications(
    required_data: dict[SOMcreator.SOMClass, dict], xml_parent: Element
) -> None:
    xml_specifications = SubElement(xml_parent, ids_xsd.SPECIFICATIONS, nsmap=NSMAP)

    for som_class, property_set_dict in required_data.items():
        if som_class.identifier_property is None:
            continue
        if som_class.is_concept:
            continue
        _build_specification(som_class, property_set_dict, xml_specifications)


def _build_applicability(som_class: SOMcreator.SOMClass, xml_parent: Element) -> None:
    xml_applicability = SubElement(xml_parent, ids_xsd.APPLICABILITY, nsmap=NSMAP)
    xml_applicability.set(xml_xsd.MINOCCURS, "1")
    xml_applicability.set(xml_xsd.MAXOCCURS, "unbounded")
    xml_property = SubElement(xml_applicability, ids_xsd.PROPERTY, nsmap=NSMAP)
    xml_property.set(ids_xsd.ATTR_DATATYPE, ifc_datatypes.LABEL.upper())
    xml_property_set = SubElement(xml_property, ids_xsd.PROPERTYSET, nsmap=NSMAP)
    SubElement(xml_property_set, ids_xsd.SIMPLEVALUE).text = (
        som_class.identifier_property.property_set.name
    )
    xml_name = SubElement(xml_property, ids_xsd.BASENAME, nsmap=NSMAP)
    SubElement(xml_name, ids_xsd.SIMPLEVALUE, nsmap=NSMAP).text = (
        som_class.identifier_property.name
    )
    xml_value = SubElement(xml_property, ids_xsd.VALUE)
    SubElement(xml_value, ids_xsd.SIMPLEVALUE, nsmap=NSMAP).text = som_class.ident_value


def _build_requirements(
    property_set_dict: dict[SOMcreator.SOMPropertySet, list[SOMcreator.SOMProperty]],
    xml_parent: Element,
) -> None:
    xml_requirement = SubElement(xml_parent, ids_xsd.REQUIREMENTS, nsmap=NSMAP)
    for property_set, property_list in property_set_dict.items():
        for som_property in property_list:
            _build_property_requirement(som_property, xml_requirement)


def _build_property_requirement(
    som_property: SOMcreator.SOMProperty, xml_parent: Element
) -> None:
    xml_property = SubElement(xml_parent, ids_xsd.PROPERTY, nsmap=NSMAP)
    xml_property.set(ids_xsd.ATTR_DATATYPE, som_property.data_type.upper())
    xml_property.set(ids_xsd.ATTR_CARDINALITY, xml_xsd.VAL_REQUIRED)
    xml_property_set = SubElement(xml_property, ids_xsd.PROPERTYSET)
    SubElement(xml_property_set, ids_xsd.SIMPLEVALUE, nsmap=NSMAP).text = (
        som_property.property_set.name
    )
    xml_name = SubElement(xml_property, ids_xsd.BASENAME)
    SubElement(xml_name, ids_xsd.SIMPLEVALUE, nsmap=NSMAP).text = som_property.name
    if not som_property.allowed_values:
        return
    xml_value = SubElement(xml_property, ids_xsd.VALUE, nsmap=NSMAP)
    xml_restriction = SubElement(xml_value, xml_xsd.RESTRICTION, nsmap=NSMAP)
    xml_restriction.set(xml_xsd.BASE, transform_data_format(som_property.data_type))

    if som_property.value_type == value_constants.LIST:
        for value in som_property.allowed_values:
            SubElement(xml_restriction, xml_xsd.ENUMERATION, nsmap=NSMAP).set(
                xml_xsd.VALUE, str(value)
            )

    if som_property.value_type == value_constants.RANGE:
        min_value = min(
            min(v[0] for v in som_property.allowed_values),
            min(v[1] for v in som_property.allowed_values),
        )
        max_value = max(
            max(v[0] for v in som_property.allowed_values),
            max(v[1] for v in som_property.allowed_values),
        )
        SubElement(xml_restriction, xml_xsd.MININCLUSIVE, nsmap=NSMAP).set(
            xml_xsd.VALUE, str(min_value)
        )
        SubElement(xml_restriction, xml_xsd.MAXINCLUSIVE, nsmap=NSMAP).set(
            xml_xsd.VALUE, str(max_value)
        )

    if som_property.value_type == value_constants.FORMAT:
        pattern = "|".join(som_property.allowed_values)
        SubElement(xml_restriction, xml_xsd.PATTERN, nsmap=NSMAP).set(
            xml_xsd.VALUE, pattern
        )


def _build_specification(
    som_class: SOMcreator.SOMClass,
    property_set_dict: dict[SOMcreator.SOMPropertySet, list[SOMcreator.SOMProperty]],
    xml_parent: Element,
) -> None:
    xml_specification = SubElement(xml_parent, ids_xsd.SPECIFICATION, nsmap=NSMAP)
    xml_specification.set(
        ids_xsd.ATTR_NAME, f"Pruefregel {som_class.name} ({som_class.ident_value})"
    )
    xml_specification.set(ids_xsd.ATTR_IFCVERSION, ids_xsd.VAL_IFC4)
    xml_specification.set(
        ids_xsd.ATTR_DESCRIPTION, "Automatisch generierte Attributpruefregel"
    )
    _build_applicability(som_class, xml_specification)
    _build_requirements(property_set_dict, xml_specification)


def export(
    proj: SOMcreator.SOMProject,
    required_data: dict[
        SOMcreator.SOMClass,
        dict[SOMcreator.SOMPropertySet, list[SOMcreator.SOMProperty]],
    ],
    path: str | os.PathLike,
    author=None,
) -> None:
    if not author:
        author = proj.author
    xml_root = Element(ids_xsd.IDS, nsmap=NSMAP)
    xml_root.set(xml_xsd.NS_XSI + xml_xsd.SCHEMALOCATION, ids_xsd.SCHEME_LOCATION_NS)
    _build_info(proj, author, xml_root)
    _build_specifications(required_data, xml_root)
    ElementTree(xml_root).write(path, pretty_print=True, encoding="UTF-8")
